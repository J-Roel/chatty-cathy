#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('whiteboard:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
//var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



//Setup socket.io
var line_history = [];
var usernames = {};

io.on('connection', function(socket){

  // when the client emits 'adduser', this listens and executes
  socket.on('newClient', function(data){
    // var line_history = [];
    var username = data.username;
    var roomCode = data.room;
    //Store our socket name
    socket.username = username;
    // store the room name in the socket session for this client
    socket.room = roomCode;
    // add the client's username to the global list
    usernames[username] = username;

    // send client to room
    socket.join(roomCode);
    
    console.log('User is now connected to socket room: ', roomCode);
  
    //clear room and room history
    line_history = [];
    //io.sockets.in(socket.room).emit('clearHistory', {});

  });


  //Update all clients of a new message
  socket.on('chat message', function (msg){
    io.sockets.in(socket.room).emit('chat message', msg);
  });


  // for(var i n chat_history) {
  //   socket.emit('msg', { msg });
  // }

  socket.on('update_room', function (data){
    for (var i in line_history) {
      io.sockets.in(socket.room).emit('draw_line', { line: line_history[i] } );
    }  
  });

  socket.on('draw_line', function (data) {
      line_history.push(data.line);
      io.sockets.in(socket.room).emit('draw_line', { line: data.line });
  });
  
  socket.on('clearHistory', function(){
      line_history = [];
      io.sockets.in(socket.room).emit('clearHistory', {});
  });

  socket.on('disconnect', function (data){
      console.log('--User is disconnected', socket.room);

      // remove the username from global usernames list
      delete usernames[socket.username];
      // update list of users in chat, client-side
      socket.leave(socket.room);
  });


});